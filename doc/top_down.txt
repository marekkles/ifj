<Program> -> def id (<ParameterList>) EOL <Command> end <ProgramEnd>
<Program> -> EOL <Program>
<Program> -> EOF
<Program> -> <Command> <Program>

<ProgramEnd> -> EOL <Program>
<ProgramEnd> -> EOF

<ParameterOther> -> , id <ParameterOther>
<ParameterOther> -> ε
<ParameterList> -> id <ParameterOther>
<ParameterList> -> ε

<Term> -> id
<Term> -> int
<Term> -> double
<Term> -> string
<TermOther> -> , <Term> <TermOther>
<TermOther> -> ε
<TermList> -> <Term> <TermOther>
<TermList> -> ε
<TermListBrackets> <TermList> )

<PrintTerm> -> id
<PrintTerm> -> int
<PrintTerm> -> double
<PrintTerm> -> string

<PrintParameters> -> ( <PrintTermListBracket>
<PrintParameters> -> <PrintTermList>
<PrintTermOther> -> , <PrintTerm> <PrintTermOther>
<PrintTermOther> -> ε
<PrintTermList> -> <PrintTerm> <PrintTermOther>
<PrintTermList> -> ε
<PrintTermListBracket> -> <PrintTermList> )

<ParseInternalInlineFunction> -> print <PrintParameters>
<ParseInternalInlineFunction> -> inputi <FuncionCallParametersEmpty>
<ParseInternalInlineFunction> -> inputf <FuncionCallParametersEmpty>
<ParseInternalInlineFunction> -> inputs <FuncionCallParametersEmpty>

<CommandEnd> -> EOL <Command>
<CommandEnd> -> EOF

<Command> -> if <Expression> then EOL <Command> else <Command> end <CommandEnd>
<Command> -> while <Expression> do EOL <Command> end <CommandEnd>
<Command> -> EOL <Command>
<Command> -> EOF

<Command> -> <Expression> <CommandEnd>
<Command> -> ε

<Command> -> id <PossibleFunctionCall> <CommandEnd>
<Command> -> <ParseInternalInlineFunction> <CommandEnd>
<Command> -> <Expression>  <CommandEnd>

<PossibleFunctionCall> -> = <Assignment>
<PossibleFunctionCall> -> ( <TermListBrackets>
<PossibleFunctionCall> -> <TermList>

<FunctioaCallParameters> -> ( <TermListBrackets>
<FunctioaCallParameters> -> <TermList>

<FuncionCallParametersEmpty> -> ( )
<FuncionCallParametersEmpty> -> ε

<Assignment> -> <ParseInternalInlineFunction>
<Assignment> -> id <FunctioaCallParameters>
<Command> -> <Expression>